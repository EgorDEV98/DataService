// <auto-generated />
using System;
using DataService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataService.Data.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20250624165101_addIndex")]
    partial class addIndex
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataService.Data.Entities.Candle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Close")
                        .HasColumnType("numeric");

                    b.Property<decimal>("High")
                        .HasColumnType("numeric");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LoadType")
                        .IsRequired()
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("Low")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Open")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ShareId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ShareId", "Interval", "Time")
                        .IsUnique();

                    b.ToTable("Candles");
                });

            modelBuilder.Entity("DataService.Data.Entities.Scheduler", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsTradingDay")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Schedulers");
                });

            modelBuilder.Entity("DataService.Data.Entities.Share", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CandleLoadStatus")
                        .IsRequired()
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryOfRisk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryOfRiskName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("DivYieldFlag")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("First1DayCandleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("First1MinCandleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Lot")
                        .HasColumnType("integer");

                    b.Property<decimal>("MinPriceIncrement")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ShortEnabledFlag")
                        .HasColumnType("boolean");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("WeekendFlag")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Ticker")
                        .IsUnique();

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("DataService.Data.Entities.Candle", b =>
                {
                    b.HasOne("DataService.Data.Entities.Share", "Share")
                        .WithMany("Candles")
                        .HasForeignKey("ShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Share");
                });

            modelBuilder.Entity("DataService.Data.Entities.Share", b =>
                {
                    b.Navigation("Candles");
                });
#pragma warning restore 612, 618
        }
    }
}
